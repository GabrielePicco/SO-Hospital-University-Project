#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/types.h>

//#if
//#else
	union semun {
	 int val;// value for SETVAL
	 struct semid_ds* buf;// buffer for IPC_STAT, IPC_SET
	 unsigned short* array;// array for GETALL, SETALL
	#if defined(__linux__)// Linux specific part
	 struct seminfo* __buf;// buffer for IPC_INFO
	#endif
	};
//#endif

void creaSemPazienti();
void avviaTriage();
int getNumMaxPazienti();

/**
 * Genera ogni x secondi un nuovo paziente (processo), dove x è
 * un numero casuale tra 0 e 2.
 */
int main(int argc,char** argv){
	int waitTime = 2;
	pid_t pidGenerator;
	pidGenerator = getpid();

	creaSemPazienti();

	//avviaTriage();

	while(1){ /* ciclo infinito per il processo generatore, termina con SIGQUIT */
		fork();
		if(pidGenerator == getpid()){ /* dopo la fork controllo se sono il padre o il filgio */
			sleep(waitTime);
			waitTime = rand() % 3; /* numero int casuale tra 0 e 2 */
		}else{
			char *argv[] = {"./paziente" , NULL }; // Il primo elemento (argv[0]) deve contenere il nome del programma da invocare.
			execv("paziente",argv);
			perror("\n<--- errore nella exve del paziente --->\n"); // la execve non ritorna, se lo fa è un errore
			exit(EXIT_FAILURE);
		}
	}
	exit(EXIT_SUCCESS);
	return 0;
}

/**
 * Funzione che crea il semaforo per l'accesso all'ospedale dei pazienti
 * vieni inizializzato con il valore contenuto del file config.ini
 */
void creaSemPazienti(){
	key_t key;
	union semun arg;
	int semid;
	int numPazienti;
	numPazienti = getNumMaxPazienti();

	//Genero la chiave per il semaforo
	if((key = ftok("processGenerator.c",']')) == -1){
		perror("Errore nella creazione delle chiave del semaforo pazienti con ftok");
		exit(EXIT_FAILURE);
	}

	//Creo il semaforo
	if((semid = semget(key,1,0666 | IPC_CREAT)) == 1){
		perror("Errore nella creazione del semaforo pazienti");
		exit(EXIT_FAILURE);
	}

	//Inizializzo il semaforo con il numero massimo di pazienti che possono
	//accedere all'ospedale contemporanemante
	arg.val = numPazienti;
	if(semctl(semid,0,SETVAL,arg) == -1){
		perror("Errore inizializzazzione semaforo");
		exit(EXIT_FAILURE);
	}
	printf("\n<--- Semaforo di controllo degli ingressi all'ospedale crearo e numero massimo dei pazienti in ingresso impostato a %d--->\n",numPazienti);
}

/**
 * Funzione che restituisce il numero massimo di pazienti che possono entrare
 * nell'ospedale contemporaneamente prendendolo dal file config.ini
 */
int getNumMaxPazienti(){
	int pazienti = 0;
	FILE* fconf;
	fconf = fopen("config.ini","r");
	fscanf(fconf,"Numero Pazienti (Max) = %d;",&pazienti);
	return pazienti;
}

void avviaTriage(){
	pid_t pid = fork();
	if(pid == 0){ /* dopo la fork controllo se sono il filgio e avvio il processo triage*/
		char *argv[] = {"./triage" , NULL }; // Il primo elemento (argv[0]) deve contenere il nome del programma da invocare.
		execv("triage",argv);
		perror("\n<--- errore nella exve del triage --->\n"); // la execve non ritorna, se lo fa è un errore
		exit(EXIT_FAILURE);
	}
}
